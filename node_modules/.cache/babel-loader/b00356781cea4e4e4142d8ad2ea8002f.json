{"ast":null,"code":"var _jsxFileName = \"/home/kumar/learning/src/arrayMtds.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ArrayMtds = () => {\n  _s();\n\n  const [status, setstatus] = useState(6);\n  useEffect(() => {\n    //for more information:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\n    //If we use the negative value for index, the value is counting from backend of the array.\n    var arr1 = [5, 12, 8, 130, 144, 10];\n    let arr = [{\n      \"name\": \"kumar\",\n      \"age\": 20,\n      \"mail\": \"kumarmadhu@gmail.com\"\n    }, {\n      \"name\": \"mamatha\",\n      \"age\": 30,\n      \"mailId\": \"kumarmadhu@gmail.com\"\n    }]; //Filter method(status=1).\n\n    if (status === 1) {\n      let word = 20; //1st: each element, 2nd: index, 3rd: whole array (parameters can be passed).\n\n      let newArr = arr.filter(res => {\n        // By using Object.keys we can take the keys of an object and by using Object.values we can take \n        // the values of an object.\n        for (var key in Object.values(res)) {\n          if (Object.values(res)[key].toString().includes(word.toString().toLowerCase())) return true;\n        }\n\n        return false;\n      });\n      console.log(newArr);\n    } // Difference b/w ForEach and map.\n    // * Both forEach and map recieves a function as an argument and execute it once for each array Element\n    //   but forEach return undefined value and map return new altered array.\n    // * we can't chain other methods in forEach like reduce, filter and reduce method where in map method we can.\n    // * The original array will change if we are using forEach method where as in map it return completely new array.\n    //ForEach method.\n    else if (status === 2) {\n        //1st: each element, 2nd: index, 3rd: whole array (parameters can be passed).\n        let newArr = arr1.forEach(res => {\n          return res.age * 5; // return arr[i] = res.age*5\n        });\n        console.log(newArr, arr1);\n      } //map method.\n      else if (status === 3) {\n          //1st: each element, 2nd: index, 3rd: whole array (parameters can be passed).\n          let newArr = arr1.map(res => {\n            return res.age * 5;\n          });\n          console.log(newArr, arr1);\n        } // (for some of the method the browser compatibility will not be there on that time it will show not a function)\n        //at method(not working bcz of browser compatibility).\n        else if (status === 4) {\n            //index(parameter)\n            console.log(arr1.at(2)); //8\n\n            console.log(arr1.at(-3)); //130\n\n            console.log(arr1.at(8)); //undefined\n          } //concat method.\n          else if (status === 5) {\n              let letters = ['a', 'b', 'c'];\n              let numbers = [1, 2, 3];\n              let newArr = arr1.concat(letters, numbers);\n              let newArr1 = [...arr1, ...letters, ...numbers];\n              console.log(newArr, newArr1, arr1, \"kumar\");\n            } //copywithin method.\n            else if (status === 6) {\n                //1st: target, 2nd: start, 3rd: end (parameters can be passed).\n                //It modify the original array.\n                //work only one functionality at a time.\n                //** */ \n                // let newArr = arr1.copyWithin(3)\n                // console.log(newArr,arr1) // [5,12,8,5,12,8]\n                //** */\n                let newArr1 = arr1.copyWithin(3, 1);\n                console.log(newArr1, arr1); // [5,12,8,12,8,130]\n                //** */\n                // let newArr1 = arr1.copyWithin(3,1,2)\n                // console.log(newArr1,arr1) // [5,12,8,12,144,10]\n              }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"kumar Madhu Arry methods\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ArrayMtds, \"OU7wi0LNOf/SDbRUpBRTfKfCw7I=\");\n\n_c = ArrayMtds;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArrayMtds\");","map":{"version":3,"sources":["/home/kumar/learning/src/arrayMtds.jsx"],"names":["useState","useEffect","ArrayMtds","status","setstatus","arr1","arr","word","newArr","filter","res","key","Object","values","toString","includes","toLowerCase","console","log","forEach","age","map","at","letters","numbers","concat","newArr1","copyWithin"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"\n\nexport const ArrayMtds = () => {\n    const [status, setstatus] = useState(6)\n    useEffect(() => {\n        //for more information:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\n        //If we use the negative value for index, the value is counting from backend of the array.\n        var arr1 = [5, 12, 8, 130, 144, 10];\n        let arr = [{\n            \"name\": \"kumar\",\n            \"age\": 20,\n            \"mail\": \"kumarmadhu@gmail.com\"\n        }, {\n            \"name\": \"mamatha\",\n            \"age\": 30,\n            \"mailId\": \"kumarmadhu@gmail.com\"\n        }]\n        //Filter method(status=1).\n        if (status === 1) {\n            let word = 20\n            //1st: each element, 2nd: index, 3rd: whole array (parameters can be passed).\n            let newArr = arr.filter((res) => {\n                // By using Object.keys we can take the keys of an object and by using Object.values we can take \n                // the values of an object.\n                for (var key in Object.values(res)) {\n                    if (Object.values(res)[key].toString().includes(word.toString().toLowerCase()))\n                        return true\n                }\n                return false\n            })\n            console.log(newArr)\n        }\n        // Difference b/w ForEach and map.\n        // * Both forEach and map recieves a function as an argument and execute it once for each array Element\n        //   but forEach return undefined value and map return new altered array.\n        // * we can't chain other methods in forEach like reduce, filter and reduce method where in map method we can.\n        // * The original array will change if we are using forEach method where as in map it return completely new array.\n\n        //ForEach method.\n        else if (status === 2) {\n            //1st: each element, 2nd: index, 3rd: whole array (parameters can be passed).\n            let newArr = arr1.forEach((res) => {\n                return res.age * 5\n                // return arr[i] = res.age*5\n            })\n            console.log(newArr, arr1)\n        }\n\n        //map method.\n        else if (status === 3) {\n            //1st: each element, 2nd: index, 3rd: whole array (parameters can be passed).\n            let newArr = arr1.map(res => {\n                return res.age * 5\n            })\n            console.log(newArr, arr1)\n        }\n\n        // (for some of the method the browser compatibility will not be there on that time it will show not a function)\n\n        //at method(not working bcz of browser compatibility).\n        else if (status === 4) {\n            //index(parameter)\n            console.log(arr1.at(2)) //8\n            console.log(arr1.at(-3)) //130\n            console.log(arr1.at(8)) //undefined\n        }\n\n        //concat method.\n        else if (status === 5) {\n            let letters = ['a', 'b', 'c'];\n            let numbers = [1, 2, 3];\n            let newArr = arr1.concat(letters,numbers); \n            let newArr1 = [...arr1, ...letters, ...numbers]; \n            console.log(newArr,newArr1,arr1,\"kumar\");\n        }\n\n        //copywithin method.\n        else if (status === 6) {\n            //1st: target, 2nd: start, 3rd: end (parameters can be passed).\n            //It modify the original array.\n            //work only one functionality at a time.\n\n            //** */ \n            // let newArr = arr1.copyWithin(3)\n            // console.log(newArr,arr1) // [5,12,8,5,12,8]\n\n            //** */\n            let newArr1 = arr1.copyWithin(3,1)\n            console.log(newArr1,arr1) // [5,12,8,12,8,130]\n\n            //** */\n            // let newArr1 = arr1.copyWithin(3,1,2)\n            // console.log(newArr1,arr1) // [5,12,8,12,144,10]\n        }\n    }, [])\n\n    return (\n        <div>\n            kumar Madhu\n            Arry methods\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}