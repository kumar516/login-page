{"ast":null,"code":"var _jsxFileName = \"/home/kumar/login-page/src/components/loginPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/loginPage.css\";\nimport { connect } from 'react-redux';\nimport { GetList } from '../actions/loginPageActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = props => {\n  _s();\n\n  const [checked, setChecked] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setpassword] = useState(\"\");\n  const [usernameErr, setUsernameErr] = useState(\"\");\n  const [pwdErr, setPwdErr] = useState(\"\");\n  useEffect(() => {\n    let users = [{\n      \"username\": \"hruday@gmail.com\",\n      \"password\": 'hruday123'\n    }];\n    props.GetList(users);\n  }, []);\n\n  const onUsername = e => {\n    setUsername(e.target.value);\n  };\n\n  const onPassword = e => {\n    setpassword(e.target.value);\n  };\n\n  const onLogin = () => {\n    if (username === \"\" || password === \"\") {\n      if (username === \"\") {\n        setUsernameErr(\"This field should not be empty!\");\n      }\n\n      if (password === \"\") {\n        setPwdErr(\"This field should not be empty!\");\n      }\n    } else {\n      if (props.userList.length) {\n        if (props.userList.some(res => res.username == username) === true) {} else {\n          setUsernameErr(\"Invalid User!\");\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login_container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login_page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_txt\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInput_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"glyphicon glyphicon-user user_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_field\",\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: onUsername\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), usernameErr != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"err_msg\",\n          children: usernameErr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInput_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"glyphicon glyphicon-lock user_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_field\",\n          type: checked == true ? \"text\" : \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: onPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"show_pwd_con\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: checked,\n            onChange: () => {\n              setChecked(!checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pwd_txt\",\n            onClick: () => {\n              setChecked(!checked);\n            },\n            children: \"Show Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), pwdErr != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"err_msg\",\n          children: pwdErr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"CQCdDFmQDuXtXyLMhVv5yJ1D3pM=\");\n\n_c = LoginPage;\n\nconst mapStateToProps = state => ({\n  userList: state.userList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  GetList: data => dispatch(GetList(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/home/kumar/login-page/src/components/loginPage.jsx"],"names":["React","useEffect","useState","connect","GetList","LoginPage","props","checked","setChecked","username","setUsername","password","setpassword","usernameErr","setUsernameErr","pwdErr","setPwdErr","users","onUsername","e","target","value","onPassword","onLogin","userList","length","some","res","mapStateToProps","state","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../css/loginPage.css\";\nimport { connect } from 'react-redux';\nimport { GetList } from '../actions/loginPageActions';\n\nconst LoginPage = (props) => {\n    const [checked, setChecked] = useState(false);\n    const [username, setUsername] = useState(\"\");\n    const [password, setpassword] = useState(\"\");\n    const [usernameErr, setUsernameErr] = useState(\"\");\n    const [pwdErr, setPwdErr] = useState(\"\");\n\n    useEffect(() => {\n        let users = [{\n            \"username\": \"hruday@gmail.com\",\n            \"password\": 'hruday123'\n        }]\n        props.GetList(users)\n    }, [])\n\n    const onUsername = (e) => {\n        setUsername(e.target.value)\n    }\n\n    const onPassword = (e) => {\n        setpassword(e.target.value)\n    }\n\n    const onLogin = () => {\n        if (username === \"\" || password === \"\") {\n            if (username === \"\") {\n                setUsernameErr(\"This field should not be empty!\")\n            }\n            if (password === \"\") {\n                setPwdErr(\"This field should not be empty!\")\n            }\n        }\n        else {\n            if(props.userList.length){\n                if(props.userList.some(res=>res.username==username)===true){}\n                else{\n                    setUsernameErr(\"Invalid User!\")\n                }\n            }\n        }\n    }\n\n    return (\n        <div className=\"login_container\">\n            <div className=\"login_page\">\n                <div className=\"main_txt\">Login</div>\n                <div className=\"userInput_field\">\n                    <i className=\"glyphicon glyphicon-user user_icon\" />\n                    <input\n                        className=\"input_field\"\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={onUsername}\n                    />\n                    {usernameErr != \"\" && <div className=\"err_msg\">{usernameErr}</div>}\n                </div>\n                <div className=\"userInput_field\">\n                    <i className=\"glyphicon glyphicon-lock user_icon\" />\n                    <input\n                        className=\"input_field\"\n                        type={checked == true ? \"text\" : \"password\"}\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={onPassword}\n                    />\n                    <div className=\"show_pwd_con\">\n                        <input type=\"checkbox\" checked={checked} onChange={() => { setChecked(!checked) }} />\n                        <div className=\"pwd_txt\" onClick={() => { setChecked(!checked) }}>Show Password</div>\n                    </div>\n                    {pwdErr != \"\" && <div className=\"err_msg\">{pwdErr}</div>}\n                </div>\n                <button onClick={onLogin}>Login</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    userList: state.userList\n})\n\nconst mapDispatchToProps = dispatch => ({\n    GetList: (data) => dispatch(GetList(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n"]},"metadata":{},"sourceType":"module"}