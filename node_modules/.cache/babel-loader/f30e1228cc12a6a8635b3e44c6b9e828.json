{"ast":null,"code":"var _jsxFileName = \"/home/kumar/learning/src/arrayMtds.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ArrayMtds = () => {\n  _s();\n\n  const [status, setstatus] = useState(4);\n  useEffect(() => {\n    //If we use the negative value for index, the value is counting from backend of the array.\n    // const arr1 = [5, 12, 8, 130, 144, 10];\n    let arr = [{\n      \"name\": \"kumar\",\n      \"age\": 20,\n      \"mail\": \"kumarmadhu@gmail.com\"\n    }, {\n      \"name\": \"mamatha\",\n      \"age\": 30,\n      \"mailId\": \"kumarmadhu@gmail.com\"\n    }]; //Filter method(status=1).\n\n    if (status === 1) {\n      let word = 20;\n      let newArr = arr.filter(res => {\n        // By using Object.keys we can take the keys of an object and by using Object.values we can take \n        // the values of an object.\n        for (var key in Object.values(res)) {\n          if (Object.values(res)[key].toString().includes(word.toString().toLowerCase())) return true;\n        }\n\n        return false;\n      });\n      console.log(newArr);\n    } // Difference b/w ForEach and map.\n    // * Both forEach and map recieves a function as an argument and execute it once for each array Element\n    //   but forEach return undefined value and map return new altered array.\n    // * we can't chain other methods in forEach like reduce, filter and reduce method where in map method we can.\n    // * The original array will change if we are using forEach method where as in map it return completely new array.\n    //ForEach method.\n    else if (status === 2) {\n        let newArr = arr1.forEach((res, i) => {\n          return res.age * 5; // return arr[i] = res.age*5\n        });\n        console.log(newArr, arr1);\n      } //map method.\n      else if (status === 3) {\n          let newArr = arr1.map(res => {\n            return res.age * 5;\n          });\n          console.log(newArr, arr1);\n        } //at method,\n        else if (status === 4) {\n            let arr1 = [5, 12, 8, 130, 144, 10];\n            console.log(arr1.isArray(), \"kumar\");\n          }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"kumar Madhu Arry methods\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ArrayMtds, \"NUlWf6q6XMQzvaPRhrpT4ZM1ziw=\");\n\n_c = ArrayMtds;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArrayMtds\");","map":{"version":3,"sources":["/home/kumar/learning/src/arrayMtds.jsx"],"names":["useState","useEffect","ArrayMtds","status","setstatus","arr","word","newArr","filter","res","key","Object","values","toString","includes","toLowerCase","console","log","arr1","forEach","i","age","map","isArray"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,CAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA,QAAII,GAAG,GAAG,CAAC;AACP,cAAQ,OADD;AAEP,aAAO,EAFA;AAGP,cAAQ;AAHD,KAAD,EAIP;AACC,cAAQ,SADT;AAEC,aAAO,EAFR;AAGC,gBAAU;AAHX,KAJO,CAAV,CAHY,CAYZ;;AACA,QAAIF,MAAM,KAAK,CAAf,EAAkB;AACd,UAAIG,IAAI,GAAG,EAAX;AACA,UAAIC,MAAM,GAAGF,GAAG,CAACG,MAAJ,CAAYC,GAAD,IAAS;AAC7B;AACA;AACA,aAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,MAAP,CAAcH,GAAd,CAAhB,EAAoC;AAChC,cAAIE,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,GAAnB,EAAwBG,QAAxB,GAAmCC,QAAnC,CAA4CR,IAAI,CAACO,QAAL,GAAgBE,WAAhB,EAA5C,CAAJ,EACI,OAAO,IAAP;AACP;;AACD,eAAO,KAAP;AACH,OARY,CAAb;AASAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACH,KAZD,CAaA;AACA;AACA;AACA;AACA;AAEA;AAnBA,SAoBK,IAAIJ,MAAM,KAAK,CAAf,EAAkB;AACnB,YAAII,MAAM,GAAGW,IAAI,CAACC,OAAL,CAAa,CAACV,GAAD,EAAMW,CAAN,KAAY;AAClC,iBAAOX,GAAG,CAACY,GAAJ,GAAU,CAAjB,CADkC,CAElC;AACH,SAHY,CAAb;AAIAL,QAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAAoBW,IAApB;AACH,OANI,CAQL;AARK,WASA,IAAIf,MAAM,KAAK,CAAf,EAAkB;AACnB,cAAII,MAAM,GAAGW,IAAI,CAACI,GAAL,CAASb,GAAG,IAAI;AACzB,mBAAOA,GAAG,CAACY,GAAJ,GAAU,CAAjB;AACH,WAFY,CAAb;AAGAL,UAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAAoBW,IAApB;AACH,SALI,CAOL;AAPK,aAQA,IAAIf,MAAM,KAAK,CAAf,EAAkB;AACnB,gBAAIe,IAAI,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,GAAX,EAAgB,GAAhB,EAAqB,EAArB,CAAX;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACK,OAAL,EAAZ,EAA2B,OAA3B;AACH;AACJ,GAtDQ,EAsDN,EAtDM,CAAT;AAwDA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAhEM;;GAAMrB,S;;KAAAA,S","sourcesContent":["import { useState, useEffect } from \"react\"\n\nexport const ArrayMtds = () => {\n    const [status, setstatus] = useState(4)\n    useEffect(() => {\n        //If we use the negative value for index, the value is counting from backend of the array.\n        // const arr1 = [5, 12, 8, 130, 144, 10];\n        let arr = [{\n            \"name\": \"kumar\",\n            \"age\": 20,\n            \"mail\": \"kumarmadhu@gmail.com\"\n        }, {\n            \"name\": \"mamatha\",\n            \"age\": 30,\n            \"mailId\": \"kumarmadhu@gmail.com\"\n        }]\n        //Filter method(status=1).\n        if (status === 1) {\n            let word = 20\n            let newArr = arr.filter((res) => {\n                // By using Object.keys we can take the keys of an object and by using Object.values we can take \n                // the values of an object.\n                for (var key in Object.values(res)) {\n                    if (Object.values(res)[key].toString().includes(word.toString().toLowerCase()))\n                        return true\n                }\n                return false\n            })\n            console.log(newArr)\n        }\n        // Difference b/w ForEach and map.\n        // * Both forEach and map recieves a function as an argument and execute it once for each array Element\n        //   but forEach return undefined value and map return new altered array.\n        // * we can't chain other methods in forEach like reduce, filter and reduce method where in map method we can.\n        // * The original array will change if we are using forEach method where as in map it return completely new array.\n\n        //ForEach method.\n        else if (status === 2) {\n            let newArr = arr1.forEach((res, i) => {\n                return res.age * 5\n                // return arr[i] = res.age*5\n            })\n            console.log(newArr, arr1)\n        }\n\n        //map method.\n        else if (status === 3) {\n            let newArr = arr1.map(res => {\n                return res.age * 5\n            })\n            console.log(newArr, arr1)\n        }\n\n        //at method,\n        else if (status === 4) {\n            let arr1 = [5, 12, 8, 130, 144, 10];\n            console.log(arr1.isArray(),\"kumar\")\n        }\n    }, [])\n\n    return (\n        <div>\n            kumar Madhu\n            Arry methods\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}