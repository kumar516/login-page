{"ast":null,"code":"var _jsxFileName = \"/home/kumar/login-page/src/components/loginPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/loginPage.css\";\nimport { connect } from 'react-redux';\nimport { GetList } from '../actions/loginPageActions';\nimport { Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = props => {\n  _s();\n\n  const [checked, setChecked] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setpassword] = useState(\"\");\n  const [usernameErr, setUsernameErr] = useState(\"\");\n  const [pwdErr, setPwdErr] = useState(\"\");\n  const [login, setLogin] = useState(false);\n  useEffect(() => {\n    let users = [{\n      \"username\": \"hruday@gmail.com\",\n      \"password\": 'hruday123'\n    }];\n    props.GetList(users);\n  }, []);\n\n  const onUsername = e => {\n    setUsernameErr(\"\");\n    setUsername(e.target.value);\n  };\n\n  const onPassword = e => {\n    setPwdErr(\"\");\n    setpassword(e.target.value);\n  };\n\n  const onLogin = e => {\n    e.preventDefault();\n\n    if (username === \"\" || password === \"\") {\n      if (username === \"\") {\n        setUsernameErr(\"This field should not be empty!\");\n      }\n\n      if (password === \"\") {\n        setPwdErr(\"This field should not be empty!\");\n      }\n    } else {\n      if (props.userList.length) {\n        if (props.userList.some(res => res.username === username) === true) {\n          let currentUser = props.userList.filter(li => li.username === username);\n\n          if (currentUser[0].password === password) {\n            setLogin(true);\n          } else {\n            setPwdErr(\"Incorrect Password!\");\n          }\n        } else {\n          setUsernameErr(\"Invalid User!\");\n        }\n      }\n    }\n  };\n\n  const handleKeypress = e => {\n    if (e.charCode === 13) {\n      onLogin();\n    }\n  };\n\n  if (login) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login_container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login_page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main_txt\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInput_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"glyphicon glyphicon-user user_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_field\",\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: onUsername,\n          onKeyPress: handleKeypress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), usernameErr !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"err_msg\",\n          children: usernameErr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInput_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"glyphicon glyphicon-lock user_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_field\",\n          type: checked === true ? \"text\" : \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: onPassword,\n          onKeyPress: handleKeypress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"show_pwd_con\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: checked,\n            onChange: () => {\n              setChecked(!checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pwd_txt\",\n            onClick: () => {\n              setChecked(!checked);\n            },\n            children: \"Show Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), pwdErr !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"err_msg\",\n          children: pwdErr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"KWT9quqICd16K9eFueMB24tSeHA=\");\n\n_c = LoginPage;\n\nconst mapStateToProps = state => ({\n  userList: state.userList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  GetList: data => dispatch(GetList(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/home/kumar/login-page/src/components/loginPage.jsx"],"names":["React","useEffect","useState","connect","GetList","Redirect","LoginPage","props","checked","setChecked","username","setUsername","password","setpassword","usernameErr","setUsernameErr","pwdErr","setPwdErr","login","setLogin","users","onUsername","e","target","value","onPassword","onLogin","preventDefault","userList","length","some","res","currentUser","filter","li","handleKeypress","charCode","mapStateToProps","state","mapDispatchToProps","dispatch","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,sBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImB,KAAK,GAAG,CAAC;AACT,kBAAY,kBADH;AAET,kBAAY;AAFH,KAAD,CAAZ;AAIAb,IAAAA,KAAK,CAACH,OAAN,CAAcgB,KAAd;AACH,GANQ,EAMP,EANO,CAAT;;AAQA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACtBP,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAJ,IAAAA,WAAW,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAIH,CAAD,IAAO;AACtBL,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAJ,IAAAA,WAAW,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,GAHD;;AAKA,QAAME,OAAO,GAAGJ,CAAC,IAAI;AACjBA,IAAAA,CAAC,CAACK,cAAF;;AACA,QAAIjB,QAAQ,KAAK,EAAb,IAAmBE,QAAQ,KAAK,EAApC,EAAwC;AACpC,UAAIF,QAAQ,KAAK,EAAjB,EAAqB;AACjBK,QAAAA,cAAc,CAAC,iCAAD,CAAd;AACH;;AACD,UAAIH,QAAQ,KAAK,EAAjB,EAAqB;AACjBK,QAAAA,SAAS,CAAC,iCAAD,CAAT;AACH;AACJ,KAPD,MAQK;AACD,UAAIV,KAAK,CAACqB,QAAN,CAAeC,MAAnB,EAA2B;AACvB,YAAItB,KAAK,CAACqB,QAAN,CAAeE,IAAf,CAAoBC,GAAG,IAAIA,GAAG,CAACrB,QAAJ,KAAiBA,QAA5C,MAA0D,IAA9D,EAAoE;AAChE,cAAIsB,WAAW,GAAGzB,KAAK,CAACqB,QAAN,CAAeK,MAAf,CAAsBC,EAAE,IAAIA,EAAE,CAACxB,QAAH,KAAgBA,QAA5C,CAAlB;;AACA,cAAIsB,WAAW,CAAC,CAAD,CAAX,CAAepB,QAAf,KAA4BA,QAAhC,EAA0C;AACtCO,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,WAFD,MAGK;AACDF,YAAAA,SAAS,CAAC,qBAAD,CAAT;AACH;AACJ,SARD,MASK;AACDF,UAAAA,cAAc,CAAC,eAAD,CAAd;AACH;AACJ;AACJ;AACJ,GA1BD;;AA4BA,QAAMoB,cAAc,GAAIb,CAAD,IAAO;AAC1B,QAAIA,CAAC,CAACc,QAAF,KAAe,EAAnB,EAAuB;AACnBV,MAAAA,OAAO;AACV;AACJ,GAJD;;AAMA,MAAIR,KAAJ,EAAW;AACP,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,UAAA,SAAS,EAAC,aADd;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,WAAW,EAAC,UAHhB;AAII,UAAA,KAAK,EAAER,QAJX;AAKI,UAAA,QAAQ,EAAEW,UALd;AAMI,UAAA,UAAU,EAAEc;AANhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAUKrB,WAAW,KAAK,EAAhB,iBAAsB;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,oBAA0BA;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAV3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAcI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,UAAA,SAAS,EAAC,aADd;AAEI,UAAA,IAAI,EAAEN,OAAO,KAAK,IAAZ,GAAmB,MAAnB,GAA4B,UAFtC;AAGI,UAAA,WAAW,EAAC,UAHhB;AAII,UAAA,KAAK,EAAEI,QAJX;AAKI,UAAA,QAAQ,EAAEa,UALd;AAMI,UAAA,UAAU,EAAEU;AANhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAuB,YAAA,OAAO,EAAE3B,OAAhC;AAAyC,YAAA,QAAQ,EAAE,MAAM;AAAEC,cAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AAAsB;AAAjF;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,SAAf;AAAyB,YAAA,OAAO,EAAE,MAAM;AAAEC,cAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AAAsB,aAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,EAcKQ,MAAM,KAAK,EAAX,iBAAiB;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,oBAA0BA;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAdtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eA8BI;AAAQ,QAAA,OAAO,EAAEU,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH,CApGD;;GAAMpB,S;;KAAAA,S;;AAsGN,MAAM+B,eAAe,GAAGC,KAAK,KAAK;AAC9BV,EAAAA,QAAQ,EAAEU,KAAK,CAACV;AADc,CAAL,CAA7B;;AAIA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACpCpC,EAAAA,OAAO,EAAGqC,IAAD,IAAUD,QAAQ,CAACpC,OAAO,CAACqC,IAAD,CAAR;AADS,CAAL,CAAnC;;AAIA,eAAetC,OAAO,CAACkC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjC,SAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../css/loginPage.css\";\nimport { connect } from 'react-redux';\nimport { GetList } from '../actions/loginPageActions';\nimport { Redirect } from 'react-router-dom';\n\nconst LoginPage = (props) => {\n    const [checked, setChecked] = useState(false);\n    const [username, setUsername] = useState(\"\");\n    const [password, setpassword] = useState(\"\");\n    const [usernameErr, setUsernameErr] = useState(\"\");\n    const [pwdErr, setPwdErr] = useState(\"\");\n    const [login, setLogin] = useState(false)\n\n    useEffect(() => {\n        let users = [{\n            \"username\": \"hruday@gmail.com\",\n            \"password\": 'hruday123'\n        }]\n        props.GetList(users)\n    },[])\n\n    const onUsername = (e) => {\n        setUsernameErr(\"\")\n        setUsername(e.target.value)\n    }\n\n    const onPassword = (e) => {\n        setPwdErr(\"\")\n        setpassword(e.target.value)\n    }\n\n    const onLogin = e => {\n        e.preventDefault();\n        if (username === \"\" || password === \"\") {\n            if (username === \"\") {\n                setUsernameErr(\"This field should not be empty!\")\n            }\n            if (password === \"\") {\n                setPwdErr(\"This field should not be empty!\")\n            }\n        }\n        else {\n            if (props.userList.length) {\n                if (props.userList.some(res => res.username === username) === true) {\n                    let currentUser = props.userList.filter(li => li.username === username)\n                    if (currentUser[0].password === password) {\n                        setLogin(true)\n                    }\n                    else {\n                        setPwdErr(\"Incorrect Password!\")\n                    }\n                }\n                else {\n                    setUsernameErr(\"Invalid User!\")\n                }\n            }\n        }\n    }\n\n    const handleKeypress = (e) => {\n        if (e.charCode === 13) {\n            onLogin()\n        }\n    }\n\n    if (login) {\n        return <Redirect to=\"/home\" />\n    }\n\n    return (\n        <div className=\"login_container\">\n            <div className=\"login_page\">\n                <div className=\"main_txt\">Login</div>\n                <div className=\"userInput_field\">\n                    <i className=\"glyphicon glyphicon-user user_icon\" />\n                    <input\n                        className=\"input_field\"\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={onUsername}\n                        onKeyPress={handleKeypress}\n                    />\n                    {usernameErr !== \"\" && <div className=\"err_msg\">{usernameErr}</div>}\n                </div>\n                <div className=\"userInput_field\">\n                    <i className=\"glyphicon glyphicon-lock user_icon\" />\n                    <input\n                        className=\"input_field\"\n                        type={checked === true ? \"text\" : \"password\"}\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={onPassword}\n                        onKeyPress={handleKeypress}\n                    />\n                    <div className=\"show_pwd_con\">\n                        <input type=\"checkbox\" checked={checked} onChange={() => { setChecked(!checked) }} />\n                        <div className=\"pwd_txt\" onClick={() => { setChecked(!checked) }}>Show Password</div>\n                    </div>\n                    {pwdErr !== \"\" && <div className=\"err_msg\">{pwdErr}</div>}\n                </div>\n                <button onClick={onLogin}>Login</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    userList: state.userList\n})\n\nconst mapDispatchToProps = dispatch => ({\n    GetList: (data) => dispatch(GetList(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n"]},"metadata":{},"sourceType":"module"}